1. What is the difference between Procedural Programming and Object Ordinated programming?
Ans :-
*procedural programing:-Procedural Programming can be defined as a programming model which is derived from structured programming, based upon the concept of calling procedure. Procedures, also known as routines, subroutines or functions, simply consist of a series of computational steps to be carried out. During a program’s execution, any given procedure might be called at any point, including by other procedures or itself.
*object oriented programming:-Object oriented programming can be defined as a programming model which is based upon the concept of objects. Objects contain data in the form of attributes and code in the form of methods. In object oriented programming, computer programs are designed using the concept of objects that interact with real world. 
2. Challenges with procedural programming because of which OOP came into existence?
Ans:-
A major disadvantage of using Procedural Programming as a method of programming is the inability to reuse code throughout the program. Having to rewrite the same type of code many times throughout a program can add to the development cost and time of a project. Another disadvantage is the difficulty in error checking.
3. What is encapsulation?
Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit. In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class.
4. How do you hide your data in Java?
By data hiding process.
5. How do you hide implementation in Java?
  by abstraction process.
6. What are the three Characteristics of an object?
there are three characteristics of the object:-
1) behaviour
2)state
3)identity.
7. What is the thumb rule to identify classes in your application?
A simple rule of thumb in identifying classes is to look for n ouns in the problem .
analysis. M ethods, on the other hand, correspond to verbs. Of course, the “ noun and verb” is b ut a rule of thumb; only experience can help you decide which nouns and verbs are the important ones when building your classes.
8. What is "Dependency" in class relation? Explain with an example.
A Java class has a dependency on another class, if it uses an instance of this class. We call this a class dependency. ... If the Java class creates an instance of another class via the new operator, it cannot be used (and tested) independently from this class and this is called a hard dependency.
9. Explain "Association" class relation with example.
Association in Java is a connection or relation between two separate classes that are set up through their objects. Association relationship indicates how objects know each other and how they are using each other's functionality. It can be one-to-one, one-to-many, many-to-one and many-to-many.
Example:- class - state->citys->city1,city2,city3.
                   
10. Explain "Aggregation" class relation with example.
If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship.
Example:-
Consider a situation, Employee object contains many informations such as id, name, emailId etc. It contains one more object named address, which contains its own informations such as city, state, country, zipcode etc. as given below.

11. Explain "Composition" class relation with example.
The composition is a design technique in java to implement a has-a relationship. Java Inheritance is used for code reuse purposes and the same we can do by using composition. The composition is achieved by using an instance variable that refers to other objects.
An example of a composition is how the flowers and vase are arranged in Van Gogh's painting Sunflowers.


12. Explain "Inheritance" between classes with example.
Java inheritance refers to the ability in Java for one class to inherit from another class. ... The class that extends (inherits from another class) is the subclass and the class that is being extended (the class being inherited from) is the superclass . In other words, the subclass extends the superclass.

14. What are Mutator and Accessor Methods?
An accessor is a class method used to read data members, while a mutator is a class method used to change data members. It's best practice to make data members private (as in the example above) and only access them via accessors and mutators.

15. What should be the rule of writing Accessor methods?
1)void setQuantity(int qty){
}
19. Write programs using "Objects.requireNonNullElse" and "Objects.requireNonNull".
requireNonNullElse. Returns the first argument if it is non- null and otherwise returns the non- null second argument.

20. What is the use of "private" and "public" access modifiers.
public :-The public keyword is an access modifier used for classes, attributes, methods and constructors, making them accessible by any other class.
private:-The private access modifier is specified using the keyword private. The methods or data members declared as private are accessible only within the class in which they are declared. Any other class of the same package will not be able to access these members

21. At which three places can you initialize the final instance variable, write a program.
1) If the instance variable declared as final, then we have to perform initialization explicitly whether we are using it or not and JVM won’t provide any default value for the final instance variable
2)We can also initialize a final instance variable inside a non-static or instance block also.
3) Inside default constructor we can also initialize a final instance variable.

22. At which two places can you initialize the final static variable, write a program.
1)we can direct initialize value in final static variable.
2)inside the static block . it will be assigned before loading main method.
23. When to use “private” methods?
you don't want customers to call the cleaning company directly. You want to do that yourself. Similarly, rather than write the entire code in one method definition, you might write a private method that does some of the work, and then you do the rest. Using private methods makes your code easier to read.

24. How does encapsulation fails in case when an object of one class can access the private fields another object of the same class without methods? (example “equals” method.)
class Car {
 
    private int gear;
     
  // setter+getter method   
}
 
class Test {
 public boolean equals(Object obj) {
   Car otherCar = (Car) obj;
   return this.gear == otherCar.gear;
}
    public static void main(String[] args) {
         Test t=new Test();
      t.equals(newcar);
        Car car1 = new Car();
        car1.setGear(3);
         
        Car car2 = new Car();
        car2.setGear(4);
     
    }
     
}
here this car class contain anther object private information it is out of car class .
25. What are the advantages of using factory methods over constructors? Give an example from Java for the same.
The factory method is a smart way to create objects in Java and provides several advantages over the traditional approach of creating objects using constructors in Java. It can also improve the quality of code by making the code more readable, less coupled, and improves performance by caching.
